#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        mo_tog: momentary_hold_toggle_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            label = "momentary hold toggle tap";
        };

        hml: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "left home row mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
            hold-trigger-on-release;
        };

        hmr: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "right home row mods";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 46 47 45>;
            hold-trigger-on-release;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        Left_Parenthesis {
            bindings = <&kt LEFT_PARENTHESIS>;
            key-positions = <4 3>;
            layers = <0 1>;
        };

        Right_Parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 9>;
            layers = <0 1>;
        };

        Left_Bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 16>;
            layers = <0 1>;
        };

        Right_Bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <23 24>;
            layers = <0 1>;
        };

        Left_Brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <32 31>;
            layers = <0 1>;
        };

        Right_Brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <37 38>;
            layers = <0 1>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB      &kp Q                &kp W            &kp E            &kp R              &kp T                             &kp UP                &kp Y      &kp U               &kp I             &kp O            &kp P                    &kp BSPC
&caps_word   &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp H      &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr LEFT_ALT L  &hmr RIGHT_CONTROL SEMI  &kp SQT
&mo_tog 3 3  &kp Z                &kp X            &kp C            &kp V              &kp B      &kp SPACE              &kp DOWN              &kp N      &kp M               &kp COMMA         &kp DOT          &kp FSLH                 &kp ESCAPE
                                                   &kp LEFT_SHIFT   &mo_tog 1 1        &kp SPACE                                               &kp ENTER  &mo_tog 2 2         &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "num_sym";
            bindings = <
&kp DELETE  &kp QUESTION                  &kp AMPERSAND         &kp ASTERISK           &kp MINUS              &kp PIPE                         &trans          &kp SLASH  &kp N7               &kp N8             &kp N9            &kp PLUS                  &kp BACKSPACE
&kp TILDE   &hml LEFT_CONTROL UNDERSCORE  &hml LEFT_ALT DOLLAR  &hml LEFT_GUI PERCENT  &hml LEFT_SHIFT CARET  &kp BACKSLASH            &trans  &trans  &trans  &kp ASTRK  &hmr RIGHT_SHIFT N4  &hmr RIGHT_GUI N5  &hmr LEFT_ALT N6  &hmr RIGHT_CONTROL EQUAL  &kp SINGLE_QUOTE
&kp GRAVE   &trans                        &kp PLUS              &kp AT                 &kp HASH               &trans         &trans            &trans          &kp COLON  &kp N1               &kp N2             &kp N3            &kp MINUS                 &kp DOUBLE_QUOTES
                                                                &trans                 &tog 1                 &trans                                           &trans     &kp N0               &kp DOT
            >;
        };

        raise_layer {
            display-name = "nav_ctrl";
            bindings = <
&trans  &kp C_AC_SEARCH                         &kp C_PREV                         &kp C_PLAY_PAUSE      &kp C_NEXT            &kp C_VOLUME_UP                      &trans          &kp INSERT      &mkp LCLK  &kp UP_ARROW    &mkp RCLK        &kp PG_UP        &trans
&trans  &kp LEFT_CONTROL                        &kp LEFT_ALT                       &kp LEFT_GUI          &kp LEFT_SHIFT        &kp C_VOLUME_DOWN            &trans  &trans  &trans  &kp PSCRN       &kp LEFT   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_DOWN    &trans
&trans  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp K_MUTE         &trans            &trans          &kp SCROLLLOCK  &kp HOME   &kp DEL         &kp END          &kp PAUSE_BREAK  &trans
                                                                                   &kp C_AC_SEARCH       &trans                &trans                                               &trans          &tog 2     &trans
            >;
        };

        fn {
            display-name = "fn";
            bindings = <
&studio_unlock  &kp F1        &kp F2          &kp F3        &kp F4        &kp F5                                      &mmv MOVE_UP                     &kp F6           &kp F7           &kp F8           &kp F9           &kp F10  &kp F11
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans   &kp F12
&tog 3          &sys_reset    &bt BT_CLR_ALL  &bootloader   &out OUT_USB  &out OUT_BLE  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &bootloader      &sys_reset       &trans   &trans
                                              &trans        &none         &trans                                                                       &trans           &none            &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
